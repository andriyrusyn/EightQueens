ghetto VCS: before I tried to switch from X/Y to cols/rows
package com.example.arusyn.eightqueens;

import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Color;
import android.graphics.Point;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Display;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.GridLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;


public class MainActivity extends AppCompatActivity{
    private Integer[] queens = new Integer[8];   //represents each column of queens

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        showPop("App Started");

        TextView tv = (TextView) findViewById(R.id.textView);
        int i = 0;
        for(int x = 0; x < 8; x++) {
            for (int y = 0; y < 8; y++) {
                ImageButton button = new ImageButton(MainActivity.this);
                GridLayout grid = (GridLayout) findViewById(R.id.chessBoard);

                if(x%2 == 0){
                    if (i % 2 == 0) {
                        button.setBackgroundColor(Color.BLACK);
                    } else {
                        button.setBackgroundColor(Color.WHITE);
                    }
                } else {
                    if (i % 2 == 0) {
                        button.setBackgroundColor(Color.WHITE);
                    } else {
                        button.setBackgroundColor(Color.BLACK);
                    }
                }
                i++;

                int coordinateId = Integer.parseInt(Integer.toString(y) + Integer.toString(x));
                button.setId(coordinateId);

                Display display = getWindowManager().getDefaultDisplay();
                Point size = new Point();
                display.getSize(size);
                int screenWidth = size.x;
                int cellSize = (screenWidth-100)/8;

                button.setMaxWidth(cellSize);
                button.setMinimumWidth(cellSize);
                button.setMaxHeight(cellSize);
                button.setMinimumHeight(cellSize);

                button.setPadding(1, 1, 1, 1);
                button.setAdjustViewBounds(true);
                button.setScaleType(ImageView.ScaleType.FIT_CENTER);

                button.setTag("1");
                button.setOnClickListener(new View.OnClickListener() {
                    public void onClick(View v) {
                        String clickString = "" + v.getId();
                        int clickX = Character.getNumericValue(clickString.charAt(0));
                        int clickY = 0;

                        System.out.println(clickString);

                        if (clickString.equals("0") || (clickString.length() == 1)) {
                            clickY = 0;
                        } else {
                            clickY = Character.getNumericValue(clickString.charAt(1));
                        }
                        System.out.println("sent to isAllowed: (" + clickX + ", " + clickY + ")");

                        if (isAllowed(clickX, clickY)) {
                            System.out.println("Should have put a queen in: queens["+clickX+"]["+clickY+"]");
                            ImageButton b = (ImageButton) findViewById(v.getId());
                            showPop("clicked: " + clickX + ", " + clickY);
                            if (v.getTag().equals("1")) {
                                queens[clickX] = clickY;
                                b.setImageResource(R.drawable.crown);
                                v.setTag(getString(R.string.int2));
                            } else {
                                queens[clickX] = null;
                                b.setImageResource(0);
                                v.setTag(getString(R.string.int1));
                            }
                        } else {
                            showPop("Move is not allowed!");
                        }
                    }
                });
                grid.addView(button);
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    public void showPop(String s){
        Context context = getApplicationContext();
        int duration = Toast.LENGTH_SHORT;
        Toast toast = Toast.makeText(context, s, duration);
        toast.show();
    }

    private boolean isAllowed(int x, int y){
        System.out.println("isAllowed received: (" + x + ", " + y + "), queens[x] is: " + queens[x]);
        if(queens[x] != null && queens[x] == y){
            return true;
        }
        if(queens[x] != null){
            System.out.println("blocked along Y axis by a queen in: queens" + "[" + x + "], with value: " + y);
            return false;
        }
        for(int i = 0; i<8; i++){
            if(queens[i] != null){   // calculating slope will break if this is null?
                if (queens[i] == y){
                    System.out.println("blocked along X axis by a queen in: queens" + "[" + i + "], with value: " + y);
                    return false;
                }
                int slope = (y-queens[i])/(x-i);  //calculate absolute value
                if((slope==1) || (slope==-1)){
                    System.out.println("blocked diagonally by a queen in: queens" + "[" + i + "], with value: " + y + " and slope is: " + slope);
                    return false;
                }
            }
        }
        return true;
    }

    public void clickDone(View v) {
        Solver solver = new Solver(queens);
        boolean solvable = solver.solve(queens,0);
        System.out.println(solvable);
//        Integer[] correct = solver.solve(queens, 0);
//        for(int i = 0; i<8; i++){
//            int correctX = i;
//            int correctY = correct[i];
//            ImageButton button = (ImageButton) findViewById(Integer.parseInt(Integer.toString(correctY) + Integer.toString(correctX)));
//            queens[correctX] = correctY;
//            button.setImageResource(R.drawable.crown);
//            v.setTag(getString(R.string.int2));
//        }
    }
}
